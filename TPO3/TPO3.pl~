:-module(TPO3,_,[pillow,clpfd,dcg]).

:-use_module(library(http/http_server)).

:- use_module(library(service/service_registry), [reload_service_registry/0]).
:- use_module(library(service/serve_http), []). % (implements httpserv.handle/3)
:- include(library(http/http_server_hooks)).
:- use_module(library(http/http_server)).
:- use_module(library(http/http_forms)).

:- use_module(library(format)).
:- use_module(library(system)).
:- use_module(library(lists)).
:- use_module(library(aggregates)).
tablero_vacio(L):-
    L=[L1,L2,L3,L4,L5,L6,L7,L8],
    L1=[_,_,_,_,_,_,_,_],
    L2=[_,_,_,_,_,_,_,_],
    L3=[_,_,_,_,_,_,_,_],
    L4=[_,_,_,_,_,_,_,_],
    L5=[_,_,_,_,_,_,_,_],
    L6=[_,_,_,_,_,_,_,_],
    L7=[_,_,_,_,_,_,_,_],
    L8=[_,_,_,_,_,_,_,_].
    
/*
%Predicado principal para mostrar la unica solucion del problema
main1:-
    P=[TC,TF,CC,CF,AC,AF,RC,RF],
    resolver(P),
    display('Solucion:'),
    nl,
    display('Torre: '),
    display('('),
    display(TC),
    display(','),
    display(TF),
    display(')'),
    nl,
    display('Caballo: '),
    display('('),
    display(CC),
    display(','),
    display(CF),
    display(')'),
    nl,
    display('Alfil: '),
    display('('),
    display(AC),
    display(','),
    display(AF),
    display(')'),
    nl,
    display('Reina: '),
    display('('),
    display(RC),
    display(','),
    display(RF),
    display(')').
*/
%predicado para obtener la posicion de la pieza torre
pos_torre(_,_,(_,_),0).
pos_torre(F,C,(X,Y),1):-
    ((F #= Y,C #\=X);(F #\=Y,C #= X)).

%Predicado para obtener la posicion de la pieza caballo
pos_caballo(_,_,(_,_),0).
pos_caballo(F,C,(X,Y),1):- 
    ((F #=Y+1;F #= Y-1),(C#= X+2; C#= X-2));
     ((F #=Y+2;F #= Y-2),(C#= X+1; C#= X-1)).

%Predicado para obtener la posicion de la pieza alfil
pos_alfil(_,_,(_,_),0).
pos_alfil(F,C,(X,Y),1):-
    M in 1..8,
    ((C#=X-M,(F#=Y+M;F#=Y-M));
     (C#=X+M,(F#=Y+M;F#=Y-M))).

%Predicado para obtener la posicion de la pieza reina
pos_reina(_,_,(_,_),0).
pos_reina(F,C,(X,Y),1):-
    M in 1..8,
    ((F #= Y,C #\=X);
     (F #\=Y,C #= X);
     (C#=X-M,(F#=Y+M;F#=Y-M));
     (C#=X+M,(F#=Y+M;F#=Y-M))).

%Predicado donde se definen los casilleros a atacar y se definen las posiciones de las piezas
resolver(P):-
    domain(P,1,8),
    recorrer_Tablero([%Se ingresan los casilleros que se desean atacar
                      ((5,7),4),
                      ((5,5),3),
                      ((4,8),2),
                      ((1,7),2),
                      ((1,5),2),
                      ((7,5),2),
                      ((2,4),2),
                      ((4,4),2),
                      ((1,3),2),
                      ((3,3),2),
                      ((7,3),2),
                      ((5,1),2)
                     ],P),
    label(P).
%Predicado para recorrer la lista de los casilleros y determinar las posiciones de las piezas
recorrer_Tablero([],_).
recorrer_Tablero([((X,Y),N)|T],[TC,TF,CC,CF,AC,AF,RC,RF]):-
    (pos_torre(TF,TC,(X,Y),N1),
    pos_caballo(CF,CC,(X,Y),N2),
    pos_alfil(AF,AC,(X,Y),N3),
    pos_reina(RF,RC,(X,Y),N4)),
    N1+N2+N3+N4#=N,
    recorrer_Tablero(T,[TC,TF,CC,CF,AC,AF,RC,RF]).

'httpserv.handle'("/prueba",_Request,Response) :-
    HTML=[start,
          begin(head),
          title('TPO3 Ajedrez'),
          begin(style,[type='text/css']),
          " body { background-color: #1a1a1a;}",
          " header{background-color: #009933;
                    text-align:center;}",
          "#principal{background-color:#009933;
                      margin:40px;
                      padding:300px;
                     }",
          "  * { box-sizing: border-box; }",
%          "table { margin: 10px;
%                  background-color: white;      
%            }",
  %        "tr:nth-child(even),td:nth-child(odd){
  %        	background-color:black;
  %        }",
          "tr:nth-child(odd),td:nth-child(even){
          	background-color:black;
          }",
          "td{border: 0.5px solid lightgrey;
	          height: 40px;
	          width: 40px;
               }",
          "input{ padding:0;
                  text-align:center;
                  border:0;
                  height:40px;
                  width:40px;}",
          end(style),
          end(begin),
          head(body),
          begin(header),
          h1("TPO3 Ajedrez"),
          end(header),
          div([id='principal'],[
              table(
                  tbody(Lista)
                  )
          ]),
          end(body),
          end],
    tablero_vacio(L),
    tableroajedrez(L,1,Lista,[]),
    html2terms(Str, HTML),
    Response = html_string(Str).

tableroajedrez([],_) --> [].
tableroajedrez([R|Filas],N) -->
    {N1 is N + 1,
     tablerofilas(R,N,1,COLS,[]) 
    },
    [tr(COLS)],
    tableroajedrez(Filas,N1).

tablerofilas([],_,_) --> [].
tablerofilas([V|R],N,M) -->
    { (nonvar(V) -> atom_number(A,V) ; A = ''),
      M1 is M + 1
    },
    [
        td(
            input(text,[value=A,name="v" /*++ ~number_codes(N) ++ ~number_codes(M)*/])
        )
    ],
    tablerofilas(R,N,M1).

main:-
    Port = 8000,
    http_bind(Port),
    format(user_error, "=> starting HTTP server~n", []),
    reload_service_registry,
    format(user_error, "   Server reachable at http://localhost:~w~n", [Port]),
    %shell('firefox -new-tab http://localhost:8000/prueba'),
    http_loop(ExitCode),
    format(user_error, "=> HTTP server finished with exit code ~w~n", [ExitCode]),
    halt(ExitCode).

%:- initialization(main).